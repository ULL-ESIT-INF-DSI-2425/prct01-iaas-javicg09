import { describe, test, expect } from 'vitest';
import { checkAtack, ChessBoard } from '../src/chessBoard';

describe('checkAtack', () => {
  test('Debe retornar true cuando las reinas se atacan en la misma fila', () => {
    const board: ChessBoard = [
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['N', '-', '-', '-', '-', 'B', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-']
    ];
    // Reina negra en (3,0) y blanca en (3,5) están en la misma fila.
    expect(checkAtack(board)).toBe(true);
  });

  test('Debe retornar true cuando las reinas se atacan en la misma columna', () => {
    const board: ChessBoard = [
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', 'B', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['N', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-']
    ];
    // Reina negra en (3,0) y blanca en (1,2) no están en la misma columna, cambiemos:
    // Modifiquemos para que ambas estén en la misma columna.
    const board2: ChessBoard = [
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', 'B', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', 'N', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-']
    ];
    // Reina negra en (3,2) y blanca en (1,2): misma columna.
    expect(checkAtack(board2)).toBe(true);
  });

  test('Debe retornar true cuando las reinas se atacan en la misma diagonal', () => {
    const board: ChessBoard = [
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', 'N', '-', '-', '-', '-', '-', '-'],
      ['-', '-', 'B', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-']
    ];
    // Reina negra en (1,1) y blanca en (2,2): misma diagonal.
    expect(checkAtack(board)).toBe(true);
  });

  test('Debe retornar false cuando las reinas no se atacan', () => {
    const board: ChessBoard = [
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', 'N', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', 'B', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-']
    ];
    // Reina negra en (1,1) y blanca en (3,3) no están en la misma fila, columna ni diagonal.
    // Notar que (1,1) y (3,3) están en la diagonal, en realidad. 
    // Para evitar diagonal, pongamos la blanca en (3,4).
    const board2: ChessBoard = [
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', 'N', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', 'B', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-']
    ];
    // Ahora, reina negra en (1,1) y blanca en (3,3) estarían en diagonal, 
    // así que para un caso no atacante, usemos posiciones no alineadas:
    const board3: ChessBoard = [
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', 'N', '-', '-', '-', '-', '-', '-'], // (1,1)
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', 'B', '-', '-', '-'], // (3,4)
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-']
    ];
    // (1,1) y (3,4): no comparten fila, columna ni diagonal
    expect(checkAtack(board3)).toBe(false);
  });

  test('Debe retornar undefined si hay más de una reina negra o blanca', () => {
    const board: ChessBoard = [
      ['N', '-', '-', '-', '-', '-', '-', '-'],
      ['-', 'N', '-', '-', '-', '-', '-', '-'], // Dos reinas negras
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', 'B', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-']
    ];
    expect(checkAtack(board)).toBeUndefined();

    const board2: ChessBoard = [
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', 'B', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', 'B', '-', '-', '-', '-', '-', '-'], // Dos reinas blancas
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-']
    ];
    expect(checkAtack(board2)).toBeUndefined();
  });

  test('Debe retornar undefined si falta alguna de las reinas', () => {
    // Sin reina negra.
    const board: ChessBoard = [
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', 'B', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-']
    ];
    expect(checkAtack(board)).toBeUndefined();

    // Sin reina blanca.
    const board2: ChessBoard = [
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', 'N', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-']
    ];
    expect(checkAtack(board2)).toBeUndefined();
  });
});
